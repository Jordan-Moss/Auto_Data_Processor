Private Sub CommandButton1_Click()
    Exportalltabsexceptactivetab
End Sub

Sub Exportalltabsexceptactivetab()
    ' This is for exporting the workbooks with set name + Values inserted into rows A
    Dim WB As Workbook
    Dim ws As Worksheet
    Dim savepath As String

    Set WB = ThisWorkbook
    savepath = "C:\Users\jordan.moss\OneDrive - Think Print\Desktop\Costcutter - Data Process - V2\Costcutter - Differences\Data Extract\"
    
    For Each ws In WB.Worksheets
        If ws.Name <> ActiveSheet.Name And ws.Name <> "Framework" Then ' ignore current active tab and Framework tab
            If ws.Range("A2").Value <> "" Then ' check if cell A2 has data
                ws.Copy
                Dim newwb As Workbook
                Set newwb = ActiveWorkbook
                On Error Resume Next
                newwb.Sheets(1).UsedRange.NumberFormat = "@"
                newwb.Sheets(1).Rows("2:2").Insert Shift:=xlDown ' add new row in row 2
                newwb.Sheets(1).Range("A2").Value = "Cover" ' add "Cover" to cell A2
                newwb.Sheets(1).Range("J2").Value = "Cover" ' add "Cover" to cell J2
                newwb.Sheets(1).Range("B2").Value = ThisWorkbook.Sheets("Home Page").Range("C23") & " - " & ws.Range("W2").Value
                newwb.Sheets(1).Range("D2").Value = ws.Range("X2").Value ' add the text in column D from cells AH2
                newwb.SaveAs Filename:=savepath & ThisWorkbook.Sheets("Home Page").Range("C23") & " - " & ws.Range("V2").Value & " - " & ThisWorkbook.Sheets("Home Page").Range("C24").Value & ".xls", FileFormat:=xlExcel8
                newwb.Close Savechanges:=False
                On Error GoTo 0
            End If
        End If
    Next ws
End Sub

Private Sub CommandButton2_Click()
    CutDeleteConvertPaste 'Call the subroutine to cut, delete, convert, and paste values
End Sub

Sub CutDeleteConvertPaste()
    ' This is for converting data to text based on set variables
    Dim lastRow As Long
    Dim i As Integer
    Dim j As Long
    Dim ws As Worksheet
    
    Set ws = ThisWorkbook.Worksheets("Framework")
    
    For i = 6 To 7 ' Columns F to G
        lastRow = ws.Cells(ws.Rows.Count, i).End(xlUp).Row
        For j = 1 To lastRow
            If Right(ws.Cells(j, i).Value, 1) <> "p" Then
                ws.Cells(j, i).Value = "'" & Format(ws.Cells(j, i).Value, "Â£#,##0.00") ' This converts to text & ignores any data that has P on the end - It was causing issues and converting some fields
            End If
        Next j
        ws.Columns(i).NumberFormat = "@"
        Application.CalculateFullRebuild
        ThisWorkbook.RefreshAll
    Next i
    MsgBox "Cells have successfully been converted to Text, please wait for queries to refresh", vbInformation, "Refresh Completed"
End Sub

Private Sub CommandButton3_Click() ' This will refresh both data & queries
    Application.CalculateFullRebuild
    ThisWorkbook.RefreshAll

End Sub


Sub InsertRowInRow2()

    Dim ws As Worksheet
    
    ' Loop through all sheets in the workbook
    For Each ws In ThisWorkbook.Worksheets
        ' Check if the sheet is not the current sheet or the "Framework" sheet
        If ws.Name <> ActiveSheet.Name And ws.Name <> "Framework" Then
            ' Insert a new row in row 2
            ws.Rows("2:2").Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
        End If
    Next ws

End Sub

Sub CopyRowsWithCondition()
    Dim ws As Worksheet
    Dim lastRow As Long, i As Long
    
    Set ws = ThisWorkbook.Sheets("Framework")
    lastRow = ws.Cells(ws.Rows.Count, "U").End(xlUp).Row
    
    For i = lastRow To 1 Step -1
        If ws.Cells(i, "U").Value = 2 Then ' Check column U for value 2
            ws.Rows(i + 1).Insert Shift:=xlDown
            ws.Rows(i).Copy Destination:=ws.Rows(i + 1)
        End If
    Next i
End Sub


Private Sub CommandButton4_Click()
    CopyRowsWithCondition1
End Sub

Sub CopyRowsWithCondition1()
    Dim ws As Worksheet
    Dim tbl As ListObject
    Dim lastRow As Long, i As Long
    
    ' Set reference to the worksheet named "Framework"
    Set ws = ThisWorkbook.Sheets("Framework")
    
    ' Find the last used row in column U of the worksheet
    lastRow = ws.Cells(ws.Rows.Count, "U").End(xlUp).Row
    
    ' Loop through each row in column U from bottom to top
    For i = lastRow To 1 Step -1
        ' Check if the value in column U of the current row is equal to 2
        If ws.Cells(i, "U").Value = 2 Then
            ' If the condition is met, insert a new row below the current row
            ws.Rows(i + 1).Insert Shift:=xlDown
            
            ' Copy the entire current row and paste it into the newly inserted row
            ws.Rows(i).Copy Destination:=ws.Rows(i + 1)
        End If
    Next i
    
    ' Resize the table range to include the newly inserted rows
    Set tbl = ws.ListObjects(1) ' Assuming the table is the first table on the worksheet
    tbl.Resize tbl.Range.Resize(tbl.Range.Rows.Count + 1)
    
    ' Remove any blank rows at the bottom of the table
    Dim lastTableDataRow As Long
    lastTableDataRow = tbl.ListRows.Count
    For i = lastTableDataRow To 1 Step -1
        If Application.WorksheetFunction.CountA(tbl.ListRows(i).Range) = 0 Then
            tbl.ListRows(i).Delete
        Else
            Exit For ' Exit loop when encountering the first non-blank row
        End If
    Next i
    
MsgBox "Data has been Duplicated", vbInformation, "Refresh Completed"

End Sub




